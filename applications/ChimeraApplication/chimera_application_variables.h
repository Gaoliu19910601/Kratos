//
// ==============================================================================
//  ChimeraApplication
//
//  License:         BSD License
//                   license: ChimeraApplication/license.txt
//
//  Main authors:    Aditya Ghantasala, https://github.com/adityaghantasala
//                   Navaneeth K Narayanan
//
// ==============================================================================
//

#if !defined(KRATOS_CHIMERA_APPLICATION_VARIABLES_H_INCLUDED)
#define KRATOS_CHIMERA_APPLICATION_VARIABLES_H_INCLUDED

// System includes

// External includes

// Project includes
#include "includes/define.h"
#include "includes/variables.h"
#include "includes/kratos_application.h"
#include "chimera_application.h"
#include "custom_utilities/multipoint_constraint_data.hpp"

namespace Kratos
{
typedef MpcData::Pointer MpcDataPointerType;
typedef std::vector<MpcDataPointerType> *MpcDataPointerVectorType;

KRATOS_DEFINE_3D_VARIABLE_WITH_COMPONENTS(CHIM_NEUMANN_COND);
// For MPC implementations
KRATOS_DEFINE_VARIABLE(MpcDataPointerVectorType, MPC_DATA_CONTAINER)
//KRATOS_DEFINE_VARIABLE(MpcDataPointerType, IS_WEAK);

// For segregated Chimera
KRATOS_DEFINE_VARIABLE(double, BOUNDARY_NODE);
KRATOS_DEFINE_VARIABLE(double, FLUX);
KRATOS_DEFINE_3D_VARIABLE_WITH_COMPONENTS(TRACTION);

KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, int,PATCH_INDEX)
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, double,TAUONE)
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, double,TAUTWO)
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, double,PRESSURE_MASSMATRIX_COEFFICIENT)
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, double,SUBSCALE_PRESSURE)
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, double,C_DES)
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, double,CHARACTERISTIC_VELOCITY)
KRATOS_DEFINE_3D_APPLICATION_VARIABLE_WITH_COMPONENTS( CHIMERA_APPLICATION, SUBSCALE_VELOCITY)
KRATOS_DEFINE_3D_APPLICATION_VARIABLE_WITH_COMPONENTS( CHIMERA_APPLICATION, COARSE_VELOCITY)

// Non-Newtonian constitutive relations
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, double, REGULARIZATION_COEFFICIENT)

// To be removed
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, double, BINGHAM_SMOOTHER)
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, double, GEL_STRENGTH)

// Q-Criterion (for vortex visualization)
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, double,Q_VALUE)

// Vorticity
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, double,VORTICITY_MAGNITUDE)
KRATOS_DEFINE_3D_APPLICATION_VARIABLE_WITH_COMPONENTS(CHIMERA_APPLICATION, RECOVERED_PRESSURE_GRADIENT)
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, Vector,NODAL_WEIGHTS)

// Embedded fluid variables
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, int, EMBEDDED_IS_ACTIVE)
KRATOS_DEFINE_APPLICATION_VARIABLE( CHIMERA_APPLICATION, double, EMBEDDED_WET_PRESSURE)
KRATOS_DEFINE_3D_APPLICATION_VARIABLE_WITH_COMPONENTS( FLUID_DYNAMICS_APPLICATION, EMBEDDED_WET_VELOCITY)


}

#endif /* KRATOS_CHIMERA_APPLICATION_VARIABLES_H_INCLUDED */
